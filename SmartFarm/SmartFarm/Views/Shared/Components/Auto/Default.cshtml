@using System.Collections.Generic;
@using SmartFarm.Models;
@model List<OutputModel>;
            @foreach (var sp in Model)
            {
                  <input type="hidden" feedName="@sp.feedName" value="@sp.valueOpen"
                  inputFeedName="@sp.inputOupts.feedName" time="@sp.inputOupts.timeSet.TotalSeconds"
                  Max="@sp.inputOupts.nguongMax" Min="@sp.inputOupts.nguongMin" auto="@sp.auto1" calculate="@sp.inputOupts.calculate.ToString()" class="auto_control"/>
                  }
            <input type="hidden" value="@Model[0].AioKey" id="aiokey"/>
<script type="text/javascript">
  var a=document.querySelector("#aiokey").getAttribute("value");
  var user_Adafruit = {
    aIO_key: a,
    userName: "luucongdinh"
  };
  function requestPost(key_feed, aIO_key, userName, data) {
    var _data = { value: `${data}` };
    var url = `https://io.adafruit.com/api/v2/${userName}/feeds/${key_feed}/data`;
    fetch(url, {
      method: "POST",
      body: JSON.stringify(_data),
      headers: {
        "Content-Type": "application/json",
        "X-Aio-Key": `${aIO_key}`
      }
    })
      .then(response => response.json())
      .then(json => console.log(json))
      .catch(err => console.log(err));
  }
  function initial(el) {
    var key_feedI = el.getAttribute("inputFeedName");
    var url = `https://io.adafruit.com/api/v2/${user_Adafruit.userName}/feeds/${key_feedI}/data?limit=1`;
    fetch(url, {
      method: "GET",
      headers: {
        "X-Aio-Key": `${user_Adafruit.aIO_key}`
      }
    })
      .then(response => response.json())
      .then(data => {
        var data1 = el.getAttribute("value");
        var key_feedO = el.getAttribute("feedName");
        var url = `https://io.adafruit.com/api/v2/${user_Adafruit.userName}/feeds/${key_feedO}/data?limit=1`;
        fetch(url, {
        method: "GET",
        headers: {
            "X-Aio-Key": `${user_Adafruit.aIO_key}`
        }
        })
        .then(response => response.json())
        .then(d => {
            console.log(d);
            if(el.getAttribute("calculate")=="True")
            {
                if (parseFloat(data[0].value, 10) > parseFloat(el.getAttribute("Max"), 10)) {
                    if (d[0].value != el.getAttribute("value"))
                        requestPost(key_feedO, user_Adafruit.aIO_key, user_Adafruit.userName, data1.toString());
                }
                else if (parseFloat(data[0].value, 10) < parseFloat(el.getAttribute("Min"), 10)) {
                    if (d[0].value == el.getAttribute("value"))
                        requestPost(key_feedO, user_Adafruit.aIO_key, user_Adafruit.userName, (data1 - 1).toString());
                }
            }
            else{
                if (parseFloat(data[0].value, 10) < parseFloat(el.getAttribute("Min"), 10)) {
                    if (d[0].value != el.getAttribute("value"))
                     requestPost(key_feedO, user_Adafruit.aIO_key, user_Adafruit.userName, data1.toString());
                }
                else if (parseFloat(data[0].value, 10) > parseFloat(el.getAttribute("Max"), 10)) {
                    if (d[0].value == el.getAttribute("value"))
                     requestPost(key_feedO, user_Adafruit.aIO_key, user_Adafruit.userName, (data1 - 1).toString());
                }
            }
        })
        .catch(err => console.log(err));
      })
      .catch(err => console.log(err));
  }
  document.querySelectorAll(".auto_control").forEach((el) => {
    if (el.getAttribute("auto") == 1)
    {
      initial(el);
      setInterval(initial, el.getAttribute("time") * 1000, el);
    }
  });
</script>